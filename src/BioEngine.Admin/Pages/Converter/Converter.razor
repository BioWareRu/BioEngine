@page "/Converter"
@using Microsoft.Extensions.DependencyInjection
@using BioEngine.Admin.Old
@inherits BasePage
<PageTitle>@PageTitle</PageTitle>
<PageContainer Title="@Title">
    <Breadcrumb>
        <Breadcrumb>
            <BreadcrumbItem>
                <a href="/">BRCGames</a>
            </BreadcrumbItem>
            <BreadcrumbItem>@Title</BreadcrumbItem>
        </Breadcrumb>
    </Breadcrumb>
    <ChildContent>
        <Card Title="Сайты">
            <Button Disabled="IsLoading" Danger OnClick="ConvertSitesAsync">Конвертировать</Button>
        </Card>

        <Card Title="Разделы">
            <Button Disabled="IsLoading" Danger OnClick="ConvertSectionsAsync">Конвертировать</Button>
        </Card>
        <Card Title="Теги">
            <Button Disabled="IsLoading" Danger OnClick="ConvertTagsAsync">Конвертировать</Button>
        </Card>
        <Card Title="Посты">
            <Button Disabled="IsLoading" Danger OnClick="ConvertPostsAsync">Конвертировать</Button>
        </Card>
        <Card Title="Пост">
            <Input @bind-Value="_postId"></Input>
            <Button Disabled="@(IsLoading || _postId is null)" Danger OnClick="() => ConvertPostAsync(_postId!.Value)">Конвертировать</Button>
        </Card>
        @if (_inProcess)
        {
            <Card Title="Прогресс">
                <Progress Type="ProgressType.Circle" Percent="GetPercent()" Format="_format1"/>
                <p>Последний элемент: @_lastItemTitle</p>
            </Card>
        }
    </ChildContent>
</PageContainer>


@code {
    private bool _inProcess = false;
    private int _total;
    private int _processed;
    private string? _lastItemTitle;
    private Guid? _postId;

    private Func<double, string> _format1 => _ => $"{_processed} / {_total}";

    private async Task ConvertSitesAsync()
    {
        await StartLoadingAsync();
        _inProcess = true;
        using var scope = CreateServicesScope();
        var converter = scope.ServiceProvider.GetRequiredService<BrcConverter>();
        await converter.ConvertSitesAsync(TrackProgressAsync);
        _inProcess = false;
        await StopLoadingAsync();
    }

    private Task TrackProgressAsync(int total, int processed, string title)
    {
        _total = total;
        _processed = processed;
        _lastItemTitle = title;
        return NotifyStateChangeAsync();
    }

    private async Task ConvertSectionsAsync()
    {
        await StartLoadingAsync();
        _inProcess = true;
        using var scope = CreateServicesScope();
        var converter = scope.ServiceProvider.GetRequiredService<BrcConverter>();
        await converter.ConvertSectionsAsync(TrackProgressAsync);
        _inProcess = false;
        await StopLoadingAsync();
    }

    private async Task ConvertTagsAsync()
    {
        await StartLoadingAsync();
        _inProcess = true;
        using var scope = CreateServicesScope();
        var converter = scope.ServiceProvider.GetRequiredService<BrcConverter>();
        await converter.ConvertTagsAsync(TrackProgressAsync);
        _inProcess = false;
        await StopLoadingAsync();
    }

    private async Task ConvertPostsAsync()
    {
        await StartLoadingAsync();
        _inProcess = true;
        using var scope = CreateServicesScope();
        var converter = scope.ServiceProvider.GetRequiredService<BrcConverter>();
        await converter.ConvertPostsAsync(TrackProgressAsync);
        _inProcess = false;
        await StopLoadingAsync();
    }

    private async Task ConvertPostAsync(Guid id)
    {
        await StartLoadingAsync();
        _inProcess = true;
        using var scope = CreateServicesScope();
        var converter = scope.ServiceProvider.GetRequiredService<BrcConverter>();
        await converter.ConvertPostAsync(id);
        _inProcess = false;
        await StopLoadingAsync();
    }

    private double GetPercent() => _total > 0 ? _processed * 100d / _total : 0;
    protected override string Title => "Конвертер";
}
