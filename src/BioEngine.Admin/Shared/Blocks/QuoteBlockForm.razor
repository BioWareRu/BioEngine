@using Sitko.Core.Storage
@using BioEngine.Core
@using BioEngine.Core.Data.Entities.Blocks
@inject IStorage<BRCStorageConfig> Storage
@inject ModalService ModalService
@inherits BaseBlockForm
@using BioEngine.Admin.Extensions
@using BioEngine.Core.Extensions

<FormItem>
    <CKEEditor @bind-Value="Block.Data.Text"></CKEEditor>
</FormItem>
<Divider/>
<Row Gutter="24">
    <AntDesign.Col Span="8">
        <FormItem Label="Источник">
            <Input @bind-Value="@Block.Data.Author"/>
        </FormItem>
    </AntDesign.Col>
    <AntDesign.Col Span="8">
        <FormItem Label="Ссылка">
            <Input @bind-Value="@Block.Data.Link"/>
        </FormItem>
    </AntDesign.Col>
    <AntDesign.Col Span="8">
        <FormItem Label="Картинка к источнику">
            @if (Block.Data.Picture is not null)
            {
                <a href="@(Storage.PublicUri(Block.Data.Picture).ToString())" target="_blank">
                    <img src="@(Storage.PublicUri(Block.Data.Picture).ToString())" alt="@Block.Data.Picture.FileName" style="max-width: 50px"/>
                </a>
                <br/>
                <a href="#" @onclick="@DeletePicture" @onclick:preventDefault><i class="fas fa-trash"></i> Удалить</a>
            }
            else
            {
                <Button OnClick="@ShowStorageDialogAsync">Выбрать картинку</Button>            }
        </FormItem>
    </AntDesign.Col>
</Row>

@code
{
    [Parameter]
    public QuoteBlock Block { get; set; }

    public Task ShowStorageDialogAsync()
    {
        return ModalService.SelectStorageItemsAsync(items =>
        {
            if (items.Length > 0)
            {
                Block.Data.Picture = items.First();
                NotifyChange();
            }
        });
    }

    private void DeletePicture()
    {
        Block.Data.Picture = null;
        NotifyChange();
    }

    protected override FieldIdentifier CreateFieldIdentifier()
    {
        return FieldIdentifier.Create(() => Block.Data.Picture);
    }
}
