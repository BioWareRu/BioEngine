@using BioEngine.Admin.Extensions
@using BioEngine.Core
@using BioEngine.Core.Extensions
@using Sitko.Core.Storage
@using Sitko.Core.Storage.ImgProxy
@inherits Input<Sitko.Core.Storage.StorageItem>
@inject IStorage<BRCStorageConfig> Storage
@inject IImgProxyUrlGenerator<BRCStorageConfig> ImgProxyUrlGenerator
@inject ModalService ModalService

<div class="storageItems">
    @if (CurrentValue != null)
    {
        <div class="item">
            @if (CurrentValue.IsImage())
            {
                <img src="@(ImgProxyUrlGenerator.Resize(CurrentValue, 200, 200, "fit"))" alt="@CurrentValue.FileName"/>
            }
            else
            {
                <div>
                    <a href="@(Storage.PublicUri(CurrentValue).ToString())" target="_blank">@CurrentValue.FileName</a>
                </div>
                <div>@CurrentValue.HumanSize</div>
            }
            <span class="caption">
                <p>@CurrentValue.FileName</p>
                <a href="#" @onclick="@ResetValue" @onclick:preventDefault><i class="fas fa-trash"></i> Удалить</a>
            </span>
        </div>
    }
    else
    {
        <Button Size="large" OnClick="@ShowStorageDialogAsync">Выбрать файл</Button>
    }
</div>

@code
{
    private void ResetValue()
    {
        CurrentValue = null;
    }

    private Task ShowStorageDialogAsync()
    {
        return ModalService.SelectStorageItemsAsync(items =>
        {
            if (items.Length > 0)
            {
                CurrentValue = items.First();
            }
        });
    }
}
