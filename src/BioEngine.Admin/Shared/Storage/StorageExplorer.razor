@using Sitko.Core.Storage
@using Sitko.Core.Storage.ImgProxy
@using System.IO
@using System.Linq.Expressions
@using AntDesign.TableModels
@using BioEngine.Admin.Extensions
@using BioEngine.Core
@using BioEngine.Core.Extensions
@using JetBrains.Annotations
@inject IStorage<BRCStorageConfig> Storage
@inject IImgProxyUrlGenerator<BRCStorageConfig> ImgProxyUrlGenerator
@inject ModalService ModalService
@inject IJSRuntime JsRuntime

@{
    var title = $"{CurrentPath} / Файлы / BRC Admin";
}
<Microsoft.AspNetCore.Components.Web.Extensions.Head.Title value="@title"></Microsoft.AspNetCore.Components.Web.Extensions.Head.Title>

<AntDesign.Breadcrumb>
    @foreach (var part in Parts)
    {
        if (part == Parts.Last())
        {
            <AntDesign.BreadcrumbItem>@part.name</AntDesign.BreadcrumbItem>
        }
        else
        {
            <AntDesign.BreadcrumbItem>
                <a href="#" @onclick="@(() => LoadDataAsync(part.path))" @onclick:preventDefault>@part.name</a>
            </AntDesign.BreadcrumbItem>
        }
    }

</AntDesign.Breadcrumb>
<Divider/>
<Spin Spinning="@_loading">
    <Row Gutter="24">
        <AntDesign.Col Span="8">
            <div class="ant-upload ant-upload-select">
                <InputFile style="display: none;" id="customFile" OnChange="UploadFileAsync" multiple/>
                <span class="ant-upload">
                    <Button Icon="upload" OnClick="OpenFilesDialogAsync">
                        <span>Загрузить файлы</span>
                    </Button>
                </span>
            </div>
        </AntDesign.Col>
        <AntDesign.Col Span="8">
            <Button OnClick="ShowFolderDialogAsync">Создать папку</Button>
            <Button Danger OnClick="RefreshMetadataAsync">Обновить метаданные</Button>
        </AntDesign.Col>
        <AntDesign.Col Span="8">
            @if (SelectMode)
            {
                var text = "Выберите файлы";
                var isEnabled = _selectedRows.Any();
                if (isEnabled)
                {
                    if (IsMultiple)
                    {
                        text = $"Выбрать файлы ({_selectedRows.Count()})";
                    }
                    else
                    {
                        text = "Выбрать файл";
                    }
                }
                <AntDesign.Button Type="@ButtonType.Primary" Disabled="!isEnabled" OnClick="@SelectItemsAsync">@text</AntDesign.Button>
            }
        </AntDesign.Col>
    </Row>
    <Divider/>
    <Table TItem="StorageNode"
           DataSource="@Items"
           Total="Count"
           OnChange="@OnChange"
           @bind-PageIndex="_pageIndex"
           @bind-PageSize="_pageSize"
           @bind-SelectedRows="_selectedRows">
        @if (SelectMode)
        {
            <Selection Type="@(IsMultiple ? "checkbox" : "radio")" Disabled="@(context.Type == StorageNodeType.Directory)"/>
        }
        <Column TData="StorageNodeType" Style="width: 100px; text-align: center; font-size: 2.5em;">
            @if (context.Type == StorageNodeType.Directory)
            {
                <i class="fas fa-folder"></i>
            }
            else
            {
                var item = context.StorageItem;
                var metadata = item.GetMetadata<StorageItemMetadata>();
                if (metadata != null)
                {
                    switch (metadata.Type)
                    {
                        case StorageItemType.File:
                            <span>файл</span>
                            break;
                        case StorageItemType.Image:
                            var title = $"{metadata.ImageMetadata!.Width}x{metadata.ImageMetadata.Height}";
                            var url = ImgProxyUrlGenerator.Resize(item, 100, 100, "fit");
                            <a href="@Storage.PublicUri(item).ToString()" target="_blank">
                                <img alt="@title" style="max-width: 80%;" title="@title" src="@url"/>
                            </a>
                            break;
                    }
                }
            }
        </Column>
        <Column Title="Название" @bind-Field="@context.Name" Sortable>
            @if (context.Type == StorageNodeType.Directory)
            {
                <a href="#" @onclick="@(() => NavigateAsync(context.Name))" @onclick:preventDefault>@context.Name</a>
            }
            else
            {
                <a target="_blank" href="@Storage.PublicUri(context.StorageItem!).ToString()">@context.Name</a>
            }
        </Column>
        <Column Title="Размер" @bind-Field="@context.Size" Sortable>
            @context.HumanSize
        </Column>
        <Column Title="Дата" @bind-Field="@context.LastModified" Format="dd.MM.yyyy HH:mm:ss" Sortable DefaultSortOrder="SortDirection.Descending"/>
    </Table>
</Spin>

@code {
    private bool _loading = true;
    private IEnumerable<StorageNode> _items;
    protected int _pageIndex = 1;
    protected int _pageSize = 20;
    protected int Count;
    public IEnumerable<StorageNode> Items { get; set; } = new StorageNode[0];
    public string CurrentPath { get; set; }
    private IEnumerable<StorageNode> _selectedRows = new StorageNode[0];
    private (string path, string name)[] Parts => StorageUploadExtensions.GetPathParts(CurrentPath);

    [Parameter]
    public string Prefix { get; set; }

    [Parameter]
    public bool SelectMode { get; set; }

    [Parameter]
    public bool IsMultiple { get; set; }

    private async Task LoadDataAsync(string path)
    {
        _loading = true;
        CurrentPath = path;
        await LoadData();
        _loading = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender)
        {
            await LoadDataAsync("/");
        }
    }

    private Task NavigateAsync(string path)
    {
        return LoadDataAsync(Path.Combine(CurrentPath, path));
    }

    async Task UploadFileAsync(InputFileChangeEventArgs args)
    {
        _loading = true;
        foreach (var file in args.GetMultipleFiles())
        {
            await using var stream = new MemoryStream();
            await file.OpenReadStream(file.Size).CopyToAsync(stream);
            var path = GetStoragePath(CurrentPath);
            await Storage.ProcessAndUploadFileAsync(stream, file.Name, path);
        }
        await LoadDataAsync(CurrentPath);
    }

    private string GetStoragePath(string path)
    {
        if (path.StartsWith("/"))
        {
            path = path.Substring(1);
        }
        return Path.Combine(Prefix, path);
    }

    private Task OpenFilesDialogAsync()
    {
        var arg = new {id = "customFile"};
        return JsRuntime.InvokeVoidAsync(
            "FileUpload.open",
            arg).AsTask();
    }

    private async Task ShowFolderDialogAsync()
    {
        var options = new ConfirmOptions()
        {
            Title = "Новая папка"
        };

        var confirmRef = await ModalService.CreateConfirmAsync<FolderCreationDialog, string, string>(options, "");

        confirmRef.OnOk = async result =>
        {
            if (!string.IsNullOrEmpty(result))
            {
                await NavigateAsync(result);
            }
        };
    }

    [Parameter]
    public EventCallback<StorageItem[]> OnItemsSelect { get; set; }

    private Task SelectItemsAsync()
    {
        return OnItemsSelect.InvokeAsync(_selectedRows.Select(r => r.StorageItem!).ToArray());
    }

    private bool CanSelectItem(StorageNode item)
    {
        if (IsMultiple)
        {
            return true;
        }

        if (!_selectedRows.Any())
        {
            return true;
        }

        if (_selectedRows.Contains(item))
        {
            return true;
        }

        return false;
    }

    private async Task OnChange(QueryModel<StorageNode> queryModel)
    {
        await LoadData(queryModel.PageSize * (queryModel.PageIndex - 1), queryModel.PageSize, queryModel.SortModel);
    }

    protected async Task LoadData(int skip = 0, int take = 20, IList<ITableSortModel> sortModel = null)
    {
        _loading = true;
        _items = await Storage.GetDirectoryContentsAsync(GetStoragePath(CurrentPath));
        Count = _items.Count();

        var query = _items.AsQueryable().OrderByDescending(n => n.Type == StorageNodeType.Directory);

        if (sortModel != null)
        {
            foreach (var sort in sortModel.Where(s => s.Sort != SortDirection.None.Name))
            {
                query = sort.ThenSort(query);
            }
        }

        Items = query.Take(take).Skip(skip).ToList();

        _loading = false;
    }

    private async Task RefreshMetadataAsync()
    {
        _loading = true;
        await Storage.RefreshDirectoryContentsAsync(GetStoragePath(CurrentPath));
        await LoadData();
    }

}
