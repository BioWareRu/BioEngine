name: Admin Deploy

on:
  release:
    types:
      - released

jobs:
  build:
    runs-on: ubuntu-latest
    container: ghcr.io/sitkoru/actions-container
    env:
      PROJECT: BioEngine.Admin
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
      - name: Prepare
        id: prep
        shell: bash
        run: |
          DOCKER_IMAGE=ghcr.io/biowareru/admin
          VERSION=${GITHUB_REF#refs/tags/v}
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
              MINOR=${VERSION%.*}
              MAJOR=${MINOR%.*}
              TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Install .NET 6.0.x
        uses: actions/setup-dotnet@v1.8.1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true
      - name: Install node.js
        uses: actions/setup-node@v2.5.0
        with:
          node-version: '15'
          cache: 'npm'
          cache-dependency-path: |
            src/${{ env.PROJECT }}/Web/package.json
      - name: Build admin js
        working-directory: src/${{ env.PROJECT }}/Web
        shell: bash
        run: |
          npm ci
          npm run prod
      - name: Publish admin
        run: dotnet publish src/${{ env.PROJECT }}/${{ env.PROJECT }}.csproj -o /app/ -c Release /p:Version=${{ steps.prep.outputs.version }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build admin image
        uses: docker/build-push-action@v2
        with:
          file: ./src/${{ env.PROJECT }}/Dockerfile
          context: /app
          build-args: version=${{ steps.prep.outputs.version }}
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
      - name: Update production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            export VERSION=${{ steps.prep.outputs.version }}
            export VAULT__TOKEN=$(docker exec -e VAULT_TOKEN=$(docker exec ${{ secrets.VAULT_CONTAINER }} vault login -method=userpass -token-only -no-store username=${{ secrets.VAULT_USERNAME }} password=${{ secrets.VAULT_PASSWORD }}) ${{ secrets.VAULT_CONTAINER }} vault token create -policy=${{ secrets.VAULT_POLICY }} --orphan -field=token)
            cd ${{ secrets.HOST_WORKING_DIR }}
            ./${{ secrets.HOST_COMPOSE_SCRIPT }} up -d ${{ secrets.SERVICE_NAME_ADMIN }}
